@model CyberTech.ViewModels.ProductListViewModel
@using CyberTech.Helpers
@{
    ViewBag.Title = $"Tìm kiếm: {Model.Filter.SearchQuery}";
    Layout = "_Layout";
}

@section Styles {
    <link rel="stylesheet" href="~/css/product-list.css">
    @* <link rel="stylesheet" href="~/css/HomePage_Layout/styles.css"> *@
}

<div class="product-list-page">
    <!-- Breadcrumb -->
    <nav class="breadcrumb">
        <ol class="breadcrumb-list">
            <li><a href="@Url.Action("Index", "Home")">Trang chủ</a></li>
            <li class="active">Kết quả tìm kiếm</li>
        </ol>
    </nav>

    <div class="page-header">
        <h1 class="page-title">
            Kết quả tìm kiếm cho: "<span class="search-keyword">@Model.Filter.SearchQuery</span>"
        </h1>
        <div class="result-info">
            @if (Model.TotalProducts > 0)
            {
                <span>Hiển thị @((Model.CurrentPage - 1) * Model.Filter.PageSize + 1) - @Math.Min(Model.CurrentPage * Model.Filter.PageSize, Model.TotalProducts) trong số @Model.TotalProducts sản phẩm</span>
            }
            else
            {
                <span>Không tìm thấy sản phẩm nào</span>
            }
        </div>
    </div>

    <div class="product-content">
        <!-- Sidebar Filter -->
        <aside class="filter-sidebar">
            <div class="filter-header">
                <h3>Bộ lọc</h3>
                <button type="button" class="clear-all-filters">Xóa tất cả</button>
            </div>

            <form id="filterForm" method="get">
                <!-- Hidden inputs để giữ giá trị hiện tại -->
                <input type="hidden" name="SearchQuery" value="@Model.Filter.SearchQuery" />
                <input type="hidden" name="Page" value="1" />
                
                @* Hidden inputs để binding attributes hiện tại *@
                @{
                    int attrIndex = 0;
                }
                @foreach (var attr in Model.Filter.Attributes)
                {
                    <input type="hidden" name="Attributes[@attrIndex].Key" value="@attr.Key" />
                    <input type="hidden" name="Attributes[@attrIndex].Value" value="@attr.Value" />
                    attrIndex++;
                }

                <!-- Lọc theo danh mục -->
                @if (Model.CategoryAttributes.Any())
                {
                    <div class="filter-group">
                        <h4 class="filter-title">
                            <i class="fas fa-list" style="margin-right: 8px; color: #007bff;"></i>
                            Danh mục
                        </h4>
                        <div class="filter-options">
                            @{
                                var categories = Model.CategoryAttributes.FirstOrDefault(c => c.AttributeName == "Category");
                            }
                            @if (categories != null)
                            {
                                @foreach (var category in categories.Values.Take(10))
                                {
                                    <label class="filter-option">
                                        <input type="checkbox" name="Categories" value="@category.Value" @(category.IsSelected ? "checked" : "") />
                                        <span>@category.DisplayText <small>(@category.ProductCount)</small></span>
                                    </label>
                                }
                            }
                        </div>
                    </div>
                }

                <!-- Lọc theo thương hiệu -->
                @if (Model.CategoryAttributes.Any(c => c.AttributeName == "Brand"))
                {
                    var brands = Model.CategoryAttributes.FirstOrDefault(c => c.AttributeName == "Brand");
                    <div class="filter-group">
                        <h4 class="filter-title">
                            <i class="fas fa-tags" style="margin-right: 8px; color: #007bff;"></i>
                            Thương hiệu
                        </h4>
                        <div class="filter-options">
                            @foreach (var brand in brands.Values.Take(10))
                            {
                                <label class="filter-option">
                                    <input type="checkbox" name="Brands" value="@brand.Value" @(brand.IsSelected ? "checked" : "") />
                                    <span>@brand.DisplayText <small>(@brand.ProductCount)</small></span>
                                </label>
                            }
                        </div>
                    </div>
                }

                <!-- Lọc theo giá -->
                <div class="filter-group">
                    <h4 class="filter-title">
                        <i class="fas fa-dollar-sign" style="margin-right: 8px; color: #007bff;"></i>
                        Khoảng giá
                    </h4>
                    <div class="price-range">
                        <div class="price-inputs">
                            <input type="text" name="MinPriceDisplay" placeholder="Từ" value="@((Model.Filter.MinPrice ?? Model.MinPrice).ToString("N0")) đ" class="price-input" data-min="@Model.MinPrice.ToString("0")" data-max="@Model.MaxPrice.ToString("0")" />
                            <input type="hidden" name="MinPrice" value="@Model.Filter.MinPrice" />
                            <span>-</span>
                            <input type="text" name="MaxPriceDisplay" placeholder="Đến" value="@((Model.Filter.MaxPrice ?? Model.MaxPrice).ToString("N0")) đ" class="price-input" data-min="@Model.MinPrice.ToString("0")" data-max="@Model.MaxPrice.ToString("0")" />
                            <input type="hidden" name="MaxPrice" value="@Model.Filter.MaxPrice" />
                        </div>
                        <div class="price-range-slider">
                            <input type="range" id="priceRangeMin" min="@Model.MinPrice.ToString("0")" max="@Model.MaxPrice.ToString("0")" value="@((Model.Filter.MinPrice ?? Model.MinPrice).ToString("0"))" />
                            <input type="range" id="priceRangeMax" min="@Model.MinPrice.ToString("0")" max="@Model.MaxPrice.ToString("0")" value="@((Model.Filter.MaxPrice ?? Model.MaxPrice).ToString("0"))" />
                        </div>
                    </div>
                </div>

                <!-- Lọc theo tình trạng -->
                <div class="filter-group">
                    <h4 class="filter-title">
                        <i class="fas fa-star" style="margin-right: 8px; color: #007bff;"></i>
                        Tình trạng
                    </h4>
                    <div class="filter-options">
                        <label class="filter-option">
                            <input type="checkbox" name="HasDiscount" value="true" @(Model.Filter.HasDiscount == true ? "checked" : "") />
                            <span>Đang khuyến mãi</span>
                        </label>
                        <label class="filter-option">
                            <input type="checkbox" name="InStock" value="true" @(Model.Filter.InStock == true ? "checked" : "") />
                            <span>Còn hàng</span>
                        </label>
                    </div>
                </div>

                <button type="submit" class="apply-filter-btn">Áp dụng bộ lọc</button>
            </form>
        </aside>

        <!-- Main Content -->
        <main class="product-main">
            <!-- Sort and View Options -->
            <div class="product-toolbar">
                <div class="sort-options">
                    <label>Sắp xếp theo:</label>
                    <select name="sortBy" id="sortSelect" onchange="updateSort()">
                        @{
                            var sortOptions = new List<(string Value, string Text, bool Selected)>
                            {
                                ("relevance", "Độ liên quan", Model.Filter.SortBy == "relevance" || string.IsNullOrEmpty(Model.Filter.SortBy)),
                                ("name", "Tên A-Z", Model.Filter.SortBy == "name" && Model.Filter.SortOrder != "desc"),
                                ("price", "Giá thấp đến cao", Model.Filter.SortBy == "price" && Model.Filter.SortOrder != "desc"),
                                ("price-desc", "Giá cao đến thấp", Model.Filter.SortBy == "price" && Model.Filter.SortOrder == "desc"),
                                ("newest", "Mới nhất", Model.Filter.SortBy == "newest"),
                                ("rating", "Đánh giá cao nhất", Model.Filter.SortBy == "rating"),
                                ("bestseller", "Bán chạy nhất", Model.Filter.SortBy == "bestseller")
                            };
                        }
                        @foreach (var option in sortOptions)
                        {
                            if (option.Selected)
                            {
                                <option value="@option.Value" selected>@option.Text</option>
                            }
                            else
                            {
                                <option value="@option.Value">@option.Text</option>
                            }
                        }
                    </select>
                </div>
                
                <!-- Search within results -->
                <div class="search-within-results">
                    <form method="get" class="refine-search-form">
                        <input type="hidden" name="SearchQuery" value="@Model.Filter.SearchQuery" />
                        <input type="text" name="RefineQuery" placeholder="Tìm trong kết quả..." value="@Model.Filter.RefineQuery" class="refine-input" />
                        <button type="submit" class="refine-btn">
                            <i class="fas fa-search"></i>
                        </button>
                    </form>
                </div>
            </div>

            <!-- Products Grid -->
            @if (Model.Products.Any())
            {
                <div class="products-grid">
                    @foreach (var product in Model.Products)
                    {
                        <partial name="~/Views/Shared/_ProductCard.cshtml" model="product" />
                    }
                </div>

                <!-- Pagination -->
                @if (Model.TotalPages > 1)
                {
                    <nav class="pagination-nav">
                        <ul class="pagination">
                            @if (Model.CurrentPage > 1)
                            {
                                <li><a href="?@Html.Raw(Context.Request.QueryString.Value?.Replace($"Page={Model.CurrentPage}", $"Page={Model.CurrentPage - 1}") ?? $"Page={Model.CurrentPage - 1}")" class="page-link">‹ Trước</a></li>
                            }

                            @for (int i = Math.Max(1, Model.CurrentPage - 2); i <= Math.Min(Model.TotalPages, Model.CurrentPage + 2); i++)
                            {
                                <li class="@(i == Model.CurrentPage ? "active" : "")">
                                    <a href="?@Html.Raw(Context.Request.QueryString.Value?.Replace($"Page={Model.CurrentPage}", $"Page={i}") ?? $"Page={i}")" class="page-link">@i</a>
                                </li>
                            }

                            @if (Model.CurrentPage < Model.TotalPages)
                            {
                                <li><a href="?@Html.Raw(Context.Request.QueryString.Value?.Replace($"Page={Model.CurrentPage}", $"Page={Model.CurrentPage + 1}") ?? $"Page={Model.CurrentPage + 1}")" class="page-link">Sau ›</a></li>
                            }
                        </ul>
                    </nav>
                }
            }
            else
            {
                <div class="no-products">
                    <i class="fas fa-search"></i>
                    <h3>Không tìm thấy sản phẩm</h3>
                    <p>Không tìm thấy sản phẩm nào với từ khóa "<strong>@Model.Filter.SearchQuery</strong>"</p>
                    <div class="search-suggestions-help">
                        <p>Hãy thử:</p>
                        <ul>
                            <li>Kiểm tra lại chính tả từ khóa</li>
                            <li>Sử dụng từ khóa khác ngắn gọn hơn</li>
                            <li>Sử dụng từ khóa chung chung hơn</li>
                            <li>Xóa bộ lọc để mở rộng kết quả tìm kiếm</li>
                        </ul>
                    </div>
                    <div class="search-actions">
                        <a href="@Url.Action("Index", "Product")" class="btn btn-primary">Xem tất cả sản phẩm</a>
                        <button type="button" class="btn btn-outline-primary" onclick="document.getElementById('searchInput').focus()">Thử từ khóa khác</button>
                    </div>
                </div>
            }
        </main>
    </div>
</div>

@section Scripts {
    <script>
        // Reuse ProductList.cshtml scripts with modifications for search
        
        // Update sort for search results
        function updateSort() {
            const sortValue = document.getElementById('sortSelect').value;
            const [sortBy, sortOrder] = sortValue.includes('-') ? sortValue.split('-') : [sortValue, 'asc'];
            
            const form = document.createElement('form');
            form.method = 'GET';
            form.action = window.location.pathname;
            
            // Add all current parameters
            const params = new URLSearchParams(window.location.search);
            params.set('SortBy', sortBy);
            params.set('SortOrder', sortOrder === 'desc' ? 'desc' : 'asc');
            params.set('Page', '1');
            
            for (const [key, value] of params) {
                const input = document.createElement('input');
                input.type = 'hidden';
                input.name = key;
                input.value = value;
                form.appendChild(input);
            }
            
            document.body.appendChild(form);
            form.submit();
        }

        // Clear all filters for search
        document.querySelector('.clear-all-filters').addEventListener('click', function() {
            const currentUrl = new URL(window.location);
            const newUrl = new URL(window.location.pathname, window.location.origin);
            
            // Keep only SearchQuery
            if (currentUrl.searchParams.get('SearchQuery')) {
                newUrl.searchParams.set('SearchQuery', currentUrl.searchParams.get('SearchQuery'));
            }
            
            window.location.href = newUrl.toString();
        });

        // Price range functionality (reuse from ProductList)
        const minSlider = document.getElementById('priceRangeMin');
        const maxSlider = document.getElementById('priceRangeMax');
        const minInput = document.querySelector('input[name="MinPrice"]');
        const maxInput = document.querySelector('input[name="MaxPrice"]');
        const minDisplayInput = document.querySelector('input[name="MinPriceDisplay"]');
        const maxDisplayInput = document.querySelector('input[name="MaxPriceDisplay"]');

        function formatCurrency(number) {
            return new Intl.NumberFormat('vi-VN').format(number) + ' đ';
        }

        function parseCurrency(currencyString) {
            return parseInt(currencyString.replace(/[^\d]/g, '')) || 0;
        }

        // Price input handlers
        if (minDisplayInput) {
            minDisplayInput.addEventListener('input', function() {
                const value = parseCurrency(this.value);
                minInput.value = value;
                if (minSlider) minSlider.value = value;
                
                if (value > 0) {
                    this.value = formatCurrency(value);
                }
            });
        }

        if (maxDisplayInput) {
            maxDisplayInput.addEventListener('input', function() {
                const value = parseCurrency(this.value);
                maxInput.value = value;
                if (maxSlider) maxSlider.value = value;
                
                if (value > 0) {
                    this.value = formatCurrency(value);
                }
            });
        }

        if (minSlider && maxSlider) {
            minSlider.addEventListener('input', function() {
                const value = parseInt(this.value);
                minInput.value = value;
                minDisplayInput.value = formatCurrency(value);
                
                if (value > parseInt(maxSlider.value)) {
                    maxSlider.value = value;
                    maxInput.value = value;
                    maxDisplayInput.value = formatCurrency(value);
                }
            });

            maxSlider.addEventListener('input', function() {
                const value = parseInt(this.value);
                maxInput.value = value;
                maxDisplayInput.value = formatCurrency(value);
                
                if (value < parseInt(minSlider.value)) {
                    minSlider.value = value;
                    minInput.value = value;
                    minDisplayInput.value = formatCurrency(value);
                }
            });
        }
    </script>
} 