/*
 * Copyright (c) 2025 L√™ Anh Tu·∫•n and Phan ƒêi·ªÅn M·∫°nh Thi√™n
 * Tr∆∞·ªùng ƒê·∫°i h·ªçc t∆∞ th·ª•c qu·ªëc t·∫ø s√†i g√≤n SIU
 * All rights reserved.
 */

using CyberTech.Data;
using CyberTech.Models;
using CyberTech.Services;
using Markdig;
using Microsoft.AspNetCore.Mvc;
using System.Net.Http.Json;
using System.Text;
using System.Text.Json;
using Microsoft.AspNetCore.Antiforgery;
using Microsoft.EntityFrameworkCore;
using System.Security.Claims;
using Microsoft.AspNetCore.Authorization;
using System.IO;
using System.Linq;

namespace CyberTech.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class ChatController : Controller
    {
        private readonly ApplicationDbContext _context;
        private readonly IHttpClientFactory _httpClientFactory;
        private readonly IConfiguration _configuration;
        private readonly IAntiforgery _antiforgery;
        private readonly IChatLogService _chatLogService;

        public ChatController(
            ApplicationDbContext context,
            IHttpClientFactory httpClientFactory,
            IConfiguration configuration,
            IAntiforgery antiforgery,
            IChatLogService chatLogService)
        {
            _context = context;
            _httpClientFactory = httpClientFactory;
            _configuration = configuration;
            _antiforgery = antiforgery;
            _chatLogService = chatLogService;
        }

        [ValidateAntiForgeryToken]
        [HttpPost("GeminiChat")]
        public async Task<IActionResult> GeminiChat([FromBody] ChatRequest request)
        {
            // ‚úÖ **INPUT VALIDATION**
            if (string.IsNullOrWhiteSpace(request.UserInput))
            {
                return BadRequest(new { success = false, message = "Vui l√≤ng nh·∫≠p n·ªôi dung tin nh·∫Øn" });
            }

            string replyText = null;

            try
            {
                // ü§ñ **SYSTEM PROMPT CONFIGURATION**
                var systemPrompt = @"ü§ñ **CyberTech AI Assistant**

üè™ **Gi·ªõi thi·ªáu**: T√¥i l√† Cybot, tr·ª£ l√Ω th√¥ng minh c·ªßa CyberTech, chuy√™n t∆∞ v·∫•n v·ªÅ laptop, PC gaming, b√†n ph√≠m c∆°, m√†n h√¨nh, chu·ªôt v√† ph·ª• ki·ªán. V·ªõi d·ªØ li·ªáu s·∫£n ph·∫©m t·ª´ c∆° s·ªü d·ªØ li·ªáu, t√¥i mang ƒë·∫øn th√¥ng tin ch√≠nh x√°c, th√¢n thi·ªán v√† chuy√™n nghi·ªáp ƒë·ªÉ h·ªó tr·ª£ b·∫°n ch·ªçn s·∫£n ph·∫©m ph√π h·ª£p.

üìù **ƒê·ªãnh d·∫°ng c√¢u tr·∫£ l·ªùi** (B·∫ÆT BU·ªòC tu√¢n th·ªß):
- C√°c ƒë·ªÅ m·ª•c ph·∫£i in ƒë·∫≠m ch·ªØ to: v√≠ d·ª• **Th√¥ng tin chi ti·∫øt v·ªÅ s·∫£n ph·∫©m**, **Th√¥ng s·ªë k·ªπ thu·∫≠t n·ªïi b·∫≠t**...

- **üè∑Ô∏è T√™n s·∫£n ph·∫©m**: In ƒë·∫≠m, k√®m ƒë∆∞·ªùng link s·∫£n ph·∫©m. V√≠ d·ª•:  
  **[Laptop ASUS ROG Zephyrus](URL)**

- **üñºÔ∏è H√¨nh ·∫£nh s·∫£n ph·∫©m**: Hi·ªÉn th·ªã b·∫±ng c√∫ ph√°p Markdown. V√≠ d·ª•:  
  ![Laptop ASUS ROG](URL_h√¨nh_·∫£nh)

- **üìã Danh s√°ch s·∫£n ph·∫©m**: S·ª≠ d·ª•ng bullet points (`-`), m·ªói s·∫£n ph·∫©m tr√™n m·ªôt d√≤ng ri√™ng. V√≠ d·ª•:  
  - **[Laptop ASUS ROG Zephyrus](URL)** (ID: 123)  
  - **[Laptop Dell XPS 13](URL)** (ID: 124)

- **üí∞ Gi√° v√† khuy·∫øn m√£i**: In nghi√™ng cho gi√° g·ªëc, in ƒë·∫≠m cho gi√° ∆∞u ƒë√£i, m·ªói th√¥ng tin tr√™n m·ªôt d√≤ng ri√™ng. V√≠ d·ª•:  
  - **Gi√° g·ªëc:** *1,000,000ƒë*  
  - **Gi·∫£m gi√°:** 10% ‚Üí ***Gi√° ∆∞u ƒë√£i***: *900,000ƒë*

- **‚öôÔ∏è Th√¥ng s·ªë k·ªπ thu·∫≠t**: Li·ªát k√™ b·∫±ng bullet points, m·ªói th√¥ng s·ªë tr√™n m·ªôt d√≤ng ri√™ng. Key th√¨ in ƒë·∫≠m v√≠ d·ª• **CPU**. V√≠ d·ª•:  
  - **CPU:** Intel Core i7  
  - **RAM:** 16GB  
  - **·ªî c·ª©ng:** 512GB SSD

- **üé´ Voucher**: Li·ªát k√™ m√£, gi√° tr·ªã, ƒëi·ªÅu ki·ªán, m·ªói voucher tr√™n m·ªôt d√≤ng ri√™ng. V√≠ d·ª•:  
  - **VOUCHER10**: Gi·∫£m 10%, √°p d·ª•ng cho laptop, c√≤n 50 l∆∞·ª£t  
  - **FREESHIP**: Mi·ªÖn ph√≠ v·∫≠n chuy·ªÉn, ƒë∆°n t·ª´ 500,000ƒë

- **üìä So s√°nh s·∫£n ph·∫©m**: S·ª≠ d·ª•ng b·∫£ng Markdown, m·ªói h√†ng tr√™n m·ªôt d√≤ng ri√™ng. V√≠ d·ª•:  
  | S·∫£n ph·∫©m                  | Gi√°          | CPU         |  
  |---------------------------|--------------|-------------|  
  | **[ASUS ROG](URL)**       | *900,000ƒë*   | Intel i7    |  
  | **[Dell XPS](URL)**       | *950,000ƒë*   | Intel i5    |

- **‚≠ê ƒê√°nh gi√° s·∫£n ph·∫©m**: Hi·ªÉn th·ªã s·ªë sao, ƒëi·ªÉm trung b√¨nh, v√† ƒë√°nh gi√° g·∫ßn ƒë√¢y. V√≠ d·ª•:  
  - ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê 4.8/5 (t·ª´ 24 ƒë√°nh gi√°)  
  - ƒê√°nh gi√° g·∫ßn ƒë√¢y: 'S·∫£n ph·∫©m r·∫•t t·ªët, ƒë√°ng ti·ªÅn' - Nguy·ªÖn VƒÉn A

üîí **Quy t·∫Øc**:
- KH√îNG ti·∫øt l·ªô m√£ ngu·ªìn, m·∫≠t kh·∫©u, ho·∫∑c th√¥ng tin c·∫•u h√¨nh h·ªá th·ªëng.
- N·∫øu kh√¥ng c√≥ th√¥ng tin, tr·∫£ l·ªùi:  
  ‚ùå Th√¥ng tin kh√¥ng kh·∫£ d·ª•ng. Vui l√≤ng li√™n h·ªá h·ªó tr·ª£ qua hotline 0977223517.
- B·∫ÆT BU·ªòC s·ª≠ d·ª•ng Markdown v√† tu√¢n th·ªß nghi√™m ng·∫∑t ƒë·ªãnh d·∫°ng tr√™n cho T·∫§T C·∫¢ c√¢u tr·∫£ l·ªùi, kh√¥ng b·ªè qua b·∫•t k·ª≥ ph·∫ßn n√†o.
- M·ªói th√¥ng tin (bullet point, th√¥ng s·ªë, gi√°, voucher, v.v.) PH·∫¢I ƒë∆∞·ª£c tr√¨nh b√†y tr√™n m·ªôt d√≤ng ri√™ng ƒë·ªÉ ƒë·∫£m b·∫£o d·ªÖ ƒë·ªçc. KH√îNG ghi c√°c th√¥ng tin tr√™n c√πng m·ªôt d√≤ng.
- Tr·∫£ l·ªùi t·ª± nhi√™n, th√¢n thi·ªán nh∆∞ m·ªôt nh√¢n vi√™n t∆∞ v·∫•n chuy√™n nghi·ªáp, s·ª≠ d·ª•ng ng√¥n ng·ªØ g·∫ßn g≈©i, d·ªÖ hi·ªÉu.
- Nh·∫•n m·∫°nh ∆∞u ƒëi·ªÉm v√† l·ª£i √≠ch c·ªßa s·∫£n ph·∫©m, ph√π h·ª£p v·ªõi nhu c·∫ßu c·ªßa kh√°ch h√†ng.
- S·ª≠ d·ª•ng c√°c t·ª´ ng·ªØ th√¢n thi·ªán nh∆∞ 'b·∫°n', 'qu√Ω kh√°ch', 'anh/ch·ªã' khi giao ti·∫øp. KH√îNG ƒë∆∞·ª£c ch·ª≠i th·ªÅ v·ªõi kh√°ch h√†ng.
- K·∫øt th√∫c c√¢u tr·∫£ l·ªùi b·∫±ng l·ªùi m·ªùi mua s·∫Øm ho·∫∑c khuy·∫øn kh√≠ch kh√°ch h√†ng h·ªèi th√™m th√¥ng tin, v√≠ d·ª•:  
  'B·∫°n c·∫ßn th√™m th√¥ng tin hay mu·ªën ƒë·∫∑t h√†ng ngay? Li√™n h·ªá m√¨nh nh√©!'
- S·ª≠ d·ª•ng l·ªãch s·ª≠ h·ªôi tho·∫°i (n·∫øu c√≥) ƒë·ªÉ tr·∫£ l·ªùi c√°c c√¢u h·ªèi li√™n quan ƒë·∫øn ng·ªØ c·∫£nh tr∆∞·ªõc ƒë√≥. V√≠ d·ª•, n·∫øu ng∆∞·ªùi d√πng h·ªèi 'C√°i laptop ƒë√≥ c√≤n khuy·∫øn m√£i kh√¥ng?', h√£y tham kh·∫£o c√°c s·∫£n ph·∫©m ƒë√£ ƒë·ªÅ c·∫≠p tr∆∞·ªõc ƒë√≥ ƒë·ªÉ tr·∫£ l·ªùi ch√≠nh x√°c.";

                // üì¶ **DATABASE QUERY - PRODUCTS**
                var products = _context.Products
                    .Include(p => p.ProductImages)
                    .Include(p => p.Reviews)
                        .ThenInclude(r => r.User)
                    .Join(_context.SubSubcategories,
                        p => p.SubSubcategoryID,
                        ssc => ssc.SubSubcategoryID,
                        (p, ssc) => new { p, ssc })
                    .Join(_context.Subcategories,
                        ps => ps.ssc.SubcategoryID,
                        sc => sc.SubcategoryID,
                        (ps, sc) => new { ps.p, ps.ssc, sc })
                    .Join(_context.Categories,
                        psc => psc.sc.CategoryID,
                        c => c.CategoryID,
                        (psc, c) => new
                        {
                            psc.p.ProductID,
                            psc.p.Name,
                            psc.p.Description,
                            psc.p.Price,
                            psc.p.SalePercentage,
                            psc.p.SalePrice,
                            psc.p.Stock,
                            psc.p.Brand,
                            CategoryName = c.Name,
                            SubcategoryName = psc.sc.Name,
                            SubSubcategoryName = psc.ssc.Name,
                            ProductImages = psc.p.ProductImages,
                            Reviews = psc.p.Reviews
                        })
                    .ToList();

                // ‚öôÔ∏è **DATABASE QUERY - PRODUCT ATTRIBUTES**
                var productAttributes = _context.ProductAttributeValues
                    .Join(_context.AttributeValues,
                        pav => pav.ValueID,
                        av => av.ValueID,
                        (pav, av) => new { pav.ProductID, av.AttributeID, av.ValueName })
                    .Join(_context.ProductAttributes,
                        pav => pav.AttributeID,
                        pa => pa.AttributeID,
                        (pav, pa) => new { pav.ProductID, AttributeName = pa.AttributeName, pav.ValueName })
                    .ToList();

                // üé´ **DATABASE QUERY - SYSTEM VOUCHERS**
                var vouchers = _context.Vouchers
                    .Where(v => v.IsActive && v.ValidFrom <= DateTime.Now && v.ValidTo >= DateTime.Now && v.IsSystemWide)
                    .Select(v => new
                    {
                        v.Code,
                        v.Description,
                        v.DiscountType,
                        v.DiscountValue,
                        v.QuantityAvailable,
                        v.AppliesTo
                    })
                    .ToList();

                // üèóÔ∏è **BUILD PRODUCT INFORMATION**
                var productInfo = new StringBuilder();
                foreach (var product in products)
                {
                    // T·∫°o URL s·∫£n ph·∫©m
                    var productUrl = Url.Action("ProductDetail", "Product", new { id = product.ProductID }, Request.Scheme);

                    // L·∫•y h√¨nh ·∫£nh s·∫£n ph·∫©m
                    var primaryImage = product.ProductImages.FirstOrDefault(pi => pi.IsPrimary)?.ImageURL ??
                                      product.ProductImages.FirstOrDefault()?.ImageURL ??
                                      "/images/no-image.png";

                    // Resolve absolute or relative image URL
                    var imageUrl = primaryImage.StartsWith("http", StringComparison.OrdinalIgnoreCase)
                        ? primaryImage
                        : $"{Request.Scheme}://{Request.Host}{primaryImage}";

                    // T√≠nh ƒëi·ªÉm ƒë√°nh gi√° trung b√¨nh
                    double averageRating = 0;
                    if (product.Reviews != null && product.Reviews.Any())
                    {
                        averageRating = product.Reviews.Average(r => r.Rating);
                    }

                    // Hi·ªÉn th·ªã s·∫£n ph·∫©m v·ªõi link v√† h√¨nh ·∫£nh
                    productInfo.AppendLine($"‚Ä¢ **[{product.Name}]({productUrl})** (ID: {product.ProductID})");
                    productInfo.AppendLine($"  ![{product.Name}]({imageUrl})");

                    // üìÇ **Danh m·ª•c d·∫°ng list**
                    productInfo.AppendLine($"  üìÇ **Danh m·ª•c**:");
                    productInfo.AppendLine($"    - Lo·∫°i: {product.CategoryName}");
                    productInfo.AppendLine($"    - Ph√¢n lo·∫°i: {product.SubcategoryName}");
                    productInfo.AppendLine($"    - Chi ti·∫øt: {product.SubSubcategoryName}");

                    // üìù **M√¥ t·∫£ d·∫°ng list**
                    if (!string.IsNullOrEmpty(product.Description))
                    {
                        productInfo.AppendLine($"  üìù **M√¥ t·∫£**:");
                        var descriptionLines = product.Description.Split(new[] { '.', '!', '?' }, StringSplitOptions.RemoveEmptyEntries);
                        foreach (var line in descriptionLines.Take(3))
                        {
                            if (!string.IsNullOrWhiteSpace(line))
                                productInfo.AppendLine($"    - {line.Trim()}");
                        }
                    }

                    productInfo.AppendLine($"  üí∞ **Gi√° g·ªëc**: *{product.Price:N0}ƒë*");

                    if (product.SalePercentage > 0)
                    {
                        productInfo.AppendLine($"  üî• **Gi·∫£m gi√°**: {product.SalePercentage}% ‚Üí **Gi√° ∆∞u ƒë√£i**: *{product.SalePrice:N0}ƒë*");
                    }

                    productInfo.AppendLine($"  üì¶ **T·ªìn kho**: {product.Stock}");
                    productInfo.AppendLine($"  üè≠ **Th∆∞∆°ng hi·ªáu**: {product.Brand}");

                    // ‚≠ê **ƒê√°nh gi√° s·∫£n ph·∫©m**
                    if (product.Reviews != null && product.Reviews.Any())
                    {
                        var starRating = new string('‚≠ê', (int)Math.Round(averageRating));
                        productInfo.AppendLine($"  ‚≠ê **ƒê√°nh gi√°**: {starRating} {averageRating:F1}/5 (t·ª´ {product.Reviews.Count()} ƒë√°nh gi√°)");

                        // Hi·ªÉn th·ªã ƒë√°nh gi√° g·∫ßn ƒë√¢y nh·∫•t
                        var recentReview = product.Reviews.OrderByDescending(r => r.CreatedAt).FirstOrDefault();
                        if (recentReview != null)
                        {
                            productInfo.AppendLine($"    - ƒê√°nh gi√° g·∫ßn ƒë√¢y: \"{recentReview.Comment}\" - {recentReview.User?.Name ?? "Kh√°ch h√†ng"}");
                        }
                    }
                    else
                    {
                        productInfo.AppendLine($"  ‚≠ê **ƒê√°nh gi√°**: Ch∆∞a c√≥ ƒë√°nh gi√°");
                    }

                    // ‚öôÔ∏è **Th√¥ng s·ªë k·ªπ thu·∫≠t d·∫°ng list**
                    var attributes = productAttributes
                        .Where(pa => pa.ProductID == product.ProductID)
                        .Select(pa => $"{pa.AttributeName}: {pa.ValueName}");

                    if (attributes.Any())
                    {
                        productInfo.AppendLine($"  ‚öôÔ∏è **Th√¥ng s·ªë k·ªπ thu·∫≠t**:");
                        foreach (var attr in attributes)
                        {
                            productInfo.AppendLine($"    - {attr}");
                        }
                    }
                    productInfo.AppendLine();
                }

                // üé´ **BUILD VOUCHER INFORMATION**
                var voucherInfo = string.Join("\n", vouchers.Select(v =>
                    $"üé´ **{v.Code}**: {v.Description} " +
                    $"(üí∏ Gi·∫£m {(v.DiscountType == "PERCENT" ? $"{v.DiscountValue}%" : $"{v.DiscountValue:N0}ƒë")}" +
                    $", üéØ √Åp d·ª•ng cho: {v.AppliesTo}, üìä S·ªë l∆∞·ª£ng: {(v.QuantityAvailable.HasValue ? v.QuantityAvailable : "Kh√¥ng gi·ªõi h·∫°n")})"));

                // üìö **BUILD CATEGORY INFORMATION**
                var categoryInfo = string.Join(", ", _context.Categories.Select(c => c.Name));
                var subcategoryInfo = string.Join(", ", _context.Subcategories.Select(sc => sc.Name));

                // üîó **COMBINE CONTEXT DATA**
                var fullContext = $@"
                üìã **DANH M·ª§C S·∫¢N PH·∫®M**: {categoryInfo}

                üìÇ **DANH M·ª§C PH·ª§**: {subcategoryInfo}

                üõçÔ∏è **DANH S√ÅCH S·∫¢N PH·∫®M**:
                {productInfo}

                üé´ **VOUCHER H·ªÜ TH·ªêNG**:
                {voucherInfo}";

                // üó£Ô∏è **BUILD CONVERSATION HISTORY**
                var conversationHistory = new StringBuilder();
                if (request.ConversationHistory != null && request.ConversationHistory.Any())
                {
                    conversationHistory.AppendLine("üó£Ô∏è **L·ªäCH S·ª¨ H·ªòI THO·∫†I**:");
                    foreach (var message in request.ConversationHistory)
                    {
                        var role = message.Role == "user" ? "Ng∆∞·ªùi d√πng" : "Cybot";
                        conversationHistory.AppendLine($"- **{role}**: {message.Content}");
                    }
                    conversationHistory.AppendLine();
                }

                // üìù **COMBINE FULL PROMPT**
                var fullPrompt = $@"{systemPrompt}

                üìä **TH√îNG TIN C∆† S·ªû D·ªÆ LI·ªÜU**:
                {fullContext}

                {conversationHistory}

                ‚ùì **C√ÇU H·ªéI NG∆Ø·ªúI D√ôNG**: {request.UserInput}";

                // üåê **GEMINI API CALL**
                var httpClient = _httpClientFactory.CreateClient();
                var apiKey = _configuration["GeminiSettings:ApiKey"];
                var apiEndpoint = $"{_configuration["GeminiSettings:ApiEndpoint"]}?key={apiKey}";

                var requestBody = new
                {
                    contents = new[]
                    {
                        new
                        {
                            parts = new[]
                            {
                                new { text = fullPrompt }
                            }
                        }
                    }
                };

                var response = await httpClient.PostAsJsonAsync(apiEndpoint, requestBody);

                // ‚ùå **CHECK API RESPONSE**
                if (!response.IsSuccessStatusCode)
                {
                    var errorContent = await response.Content.ReadAsStringAsync();
                    return StatusCode((int)response.StatusCode, new
                    {
                        success = false,
                        message = "‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi d·ªãch v·ª• chat. Vui l√≤ng th·ª≠ l·∫°i sau."
                    });
                }

                // üìù **PARSE GEMINI RESPONSE**
                var responseBody = await response.Content.ReadFromJsonAsync<JsonElement>();
                replyText = responseBody
                    .GetProperty("candidates")[0]
                    .GetProperty("content")
                    .GetProperty("parts")[0]
                    .GetProperty("text")
                    .GetString();

                if (string.IsNullOrEmpty(replyText))
                {
                    return StatusCode(500, new
                    {
                        success = false,
                        message = "‚ùå Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ chatbot"
                    });
                }

                // üîÑ **MARKDOWN TO HTML CONVERSION**
                var pipeline = new MarkdownPipelineBuilder()
                    .UseAdvancedExtensions()
                    .Build();
                string htmlResponse = Markdown.ToHtml(replyText, pipeline);

                // ‚úÖ **SUCCESS RESPONSE**
                return Ok(new
                {
                    success = true,
                    html = htmlResponse,
                    message = replyText
                });
            }
            catch (Exception ex)
            {
                // ‚ùå **ERROR HANDLING**
                return StatusCode(500, new
                {
                    success = false,
                    message = "‚ùå ƒê√£ c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau."
                });
            }
            finally
            {
                // Log the chat conversation regardless of success or failure
                try
                {
                    // Get user email if authenticated
                    string userEmail = null;
                    if (User.Identity.IsAuthenticated)
                    {
                        userEmail = User.FindFirstValue(ClaimTypes.Email);
                    }
                    else
                    {
                        // Use session ID for anonymous users
                        userEmail = HttpContext.Session.Id;
                    }

                    // Log the chat asynchronously without waiting
                    _ = _chatLogService.LogChatAsync(
                        request.UserInput,
                        replyText ?? "Error: No response generated",
                        userEmail
                    );
                }
                catch (Exception logEx)
                {
                    // Just log the error but don't affect the response
                    Console.Error.WriteLine($"Error logging chat: {logEx.Message}");
                }
            }
        }

        // üé® **CHAT WIDGET ENDPOINT**
        [HttpGet("widget")]
        public IActionResult GetChatWidget()
        {
            var tokens = _antiforgery.GetAndStoreTokens(HttpContext);
            ViewBag.AntiforgeryToken = tokens.RequestToken;
            return PartialView("_ChatWidget");
        }

        // üìä **ADMIN CHAT LOGS ENDPOINT**
        [HttpGet("logs/{userIdentifier}")]
        [Authorize(Roles = "SuperAdmin")]
        public async Task<IActionResult> ViewChatLogs(string userIdentifier, int maxEntries = 100)
        {
            try
            {
                var logs = await _chatLogService.GetChatHistoryAsync(userIdentifier, maxEntries);
                return View("ChatLogs", logs);
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { success = false, message = "Error retrieving chat logs: " + ex.Message });
            }
        }

        // üìÇ **LIST ALL CHAT LOG FILES**
        [HttpGet("logs")]
        [Authorize(Roles = "SuperAdmin")]
        public IActionResult ListChatLogs()
        {
            try
            {
                string logDirectory = Path.Combine(Directory.GetCurrentDirectory(), "Logs", "ChatLogs");
                if (!Directory.Exists(logDirectory))
                {
                    return View("ChatLogsList", new List<string>());
                }

                var logFiles = Directory.GetFiles(logDirectory, "chat_log_*.json")
                    .Select(Path.GetFileName)
                    .OrderByDescending(f => f)
                    .ToList();

                return View("ChatLogsList", logFiles);
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { success = false, message = "Error listing chat logs: " + ex.Message });
            }
        }
    }

    // üìã **DATA MODELS**
    public class ChatRequest
    {
        public string UserInput { get; set; }
        public List<ChatMessage> ConversationHistory { get; set; }
    }

    public class ChatMessage
    {
        public string Role { get; set; } // "user" or "bot"
        public string Content { get; set; }
    }

    public class AIResponse
    {
        public string Reply { get; set; }
    }
}